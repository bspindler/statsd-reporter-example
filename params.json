{
  "name": "Statsd-reporter-example",
  "tagline": "an example of how to plugin custom reporters to dropwizard.io framework",
  "body": "# [DropWizard.io](http://www.dropwizard.io/) statsd-reporter-example\r\nExample showing how to integrate a custom statsd-reporter into Dropwizard.io. via the SPI [ReporterFactory]\r\n(https://github.com/dropwizard/dropwizard/blob/master/dropwizard-metrics/src/main/java/io/dropwizard/metrics/ReporterFactory.java).  This is the native way of plugging in new [ScheduledReporter's'](https://github.com/dropwizard/metrics/blob/v3.1.2/metrics-core/src/main/java/com/codahale/metrics/ScheduledReporter.java) \r\n\r\nAs mentioned in ReporterFactory class we're going to:\r\n\r\n* Create a class which implements `ReporterFactory`.\r\n* Annotate it with [@JsonTypeName](https://github.com/FasterXML/jackson-annotations/blob/master/src/main/java/com/fasterxml/jackson/annotation/JsonTypeName.java) and give it a unique type name.\r\n* Add a [`src/main/resources/META-INF/services/io.dropwizard.metrics.ReporterFactory`](https://github.com/bspindler/statsd-reporter-example/blob/master/src/main/resources/META-INF/services/io.dropwizard.metrics.ReporterFactory) file with your implementation's full class name to the class path.\r\n\r\n## Integrating the [StatsDReporter](https://github.com/ReadyTalk/metrics-statsd/blob/master/metrics3-statsd/src/main/java/com/readytalk/metrics/StatsDReporter.java) from [ReadyTalk](https://github.com/ReadyTalk/metrics-statsd) \r\n\r\n### Add metrics-statsd reporter as a dependency\r\n* add the [bintray repository](https://github.com/bspindler/statsd-reporter-example/blob/master/build.gradle#L17) \r\n* add [ready talk dependency ](https://github.com/bspindler/statsd-reporter-example/blob/master/build.gradle#L27)\r\n\r\n### Adding the StatsDReporterFactory\r\n* [StatsDReporterFactory](https://github.com/bspindler/statsd-reporter-example/blob/master/src/main/java/com/netuitive/io/dropwizard/StatsDReporterFactory.java) takes care of \r\n    * building and configuring the [StatsDReporter](https://github.com/ReadyTalk/metrics-statsd/blob/master/metrics3-statsd/src/main/java/com/readytalk/metrics/StatsDReporter.java) instance we'll be using along with binding it to the [MetricRegistry](https://github.com/dropwizard/metrics/blob/3.1-maintenance/metrics-core/src/main/java/com/codahale/metrics/MetricRegistry.java)\r\n    * sets the name via the [@JsonTypeName](https://github.com/bspindler/statsd-reporter-example/blob/master/src/main/java/com/netuitive/io/dropwizard/StatsDReporterFactory.java#L35)  annotation, we named it \"statsd-reporter-example\"\r\n\r\n### Adding the io.dropwizard.metrics.ReporterFactory services file\r\n* added [`src/main/resources/META-INF/services/io.dropwizard.metrics.ReporterFactory`](https://github.com/bspindler/statsd-reporter-example/blob/master/src/main/resources/META-INF/services/io.dropwizard.metrics.ReporterFactory) with our [StatsDReporterFactory](https://github.com/bspindler/statsd-reporter-example/blob/master/src/main/java/com/netuitive/io/dropwizard/StatsDReporterFactory.java) class defined as the [ReporterFactory](https://github.com/dropwizard/dropwizard/blob/master/dropwizard-metrics/src/main/java/io/dropwizard/metrics/ReporterFactory.java).\r\n\r\nThat's it, this can now be built and integrated into your dropwizard.io application. \r\n[Check out this example to see how.](http://github.com/example-for-integratinthisthing)\r\n\r\n## Build it \r\n`./gradlew build`\r\n\r\n## Install it\r\n`./gradlew install`\r\n\r\n## Use it in your own project\r\nadd as a dependency: \r\n### Gradle w/local install \r\n```\r\ndependencies {\r\n    compile('com.netuitive.statsd-reporter-example:1.0-SNAPSHOT')\r\n}\r\n```\r\n### Update your dropwizard.io config.yml\r\n```\r\nmetrics:\r\n  frequency: 1 minute\r\n  reporters:\r\n      - type: statsd-reporter-example\r\n        host: localhost\r\n        port: 8125\r\n```\r\n\r\n### Using bintray \r\n...",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}